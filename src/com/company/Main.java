package com.company;

public class Main {

    public static void main(String[] args) {
        //Data TYPES
            //PRIMITIVE
                //boolean | boolean myBool = false; | stores true or false values
                //char | char myChar = 'a'; | stores single characters/letters
                //byte | btye myByte = 100; | stores whole numbers from -128 to 127
                //short | short myShort = 5000; | stores whole numbers from -32,768 to 32,767
                //int | int myInt = 100000; | stores whole numbers from -2,147,483,648 to 9,223,372,036,854,775,807
                //long | long myLong = 150000000000" | stores whole numbers from -2 to 63rd power to 2 to the 63rd power minus 1
                //float | float myFloat = 5.75f; | stores fractions, sufficient for storing 6 to 7 decimal digits
                //double | double myDouble = 19.99d | stores fractions, sufficient up to 15 decimal digits
            //NON-PRIMITIVE
                //Class | a Class in Java is a user defined data type i.e. it acts as a template to the data which
                    //consists of member variables and methods
                    /*public Class Class Example {
                    int firstNum = 20; - the variables
                    int secondNum = 10;
                    int total ;

                    public void add() {
                    int total = firstNum + secondNum;
                    System.out.println("The sum is" + total);
                     }

                     public void sub () {
                     int total = firstNum - secondNum;
                     System.out.println("Subtraction of numbers is: " + total)
                     */
                //Object | Car myCar = new Car() | an object is the variable of the class, which can access the elements
                //String | String myString = "name"; or String myString = new String(); | represents a sequence
                //Array | int[] myArray = {1,2,3,4,5}; OR int[] myArray = new int[5]; | An array is a single object
                    //that stores multiple variables of the same data type. Variables can be primitive or non-primitive
                //Interface | An interface is declared like a class. The key difference is that the interface contains
                    //methods that are abstract by default; they have no body. Represents "is-like' relationships
                    /*
                    interface CalcInterface {
                    void multiply()
                    void divide();
                    }

                    public class InterfaceExample implements CalcInterface {
                    //defining the variables of the class
                    int a = 10;
                    int b = 20;
                    int c;

                    //implementing the interface methods
                    public void multipl() {
                    int c = a*b;
                    System.out.println("Product is: " + c);
                    }
                    public void divide() {
                    int c = a/ b;
                    System.out.println("The quotient is: " + c);
                     */
        //OPERATORS
            //ARITHMETIC
                // + , - , / , * , %
            //RELATIONAL
                // < , > , <= , >= , == , !=
            //LOGICAL
                // && , ||
            //ASSIGNMENT
                // = , += , -= , x= , &= , ^= , != , <<= , >>= , >>>=
            //INCREMENT AND DECREMENT
                // ++, __
            //Bitwise operators
                // ^ , & , |
            //Special operators
                // .(dot operator to access methods of class)
        //RESERVED WORDS
            /* abstract | used to declare an abstract class
            catch | used to catch exceptions generated by try statements
            enum | defines a set of constants
            extends | indicates that class is inherited
            final | indicates the value cannot be changed
            finally | used to execute code after the try-catch structure
            implements | used to implement an interface
            new | used to instantiate objects
            static | used to indicate that a variable or a method is a class method
            super | used to refer to the parent class
            this | used to refer to the current object in a method or constructor
            throw | used to throw an exception explicitly
            throws | used to declare an exception
            try | block of code to handle an exception, must have a catch
             */
        //VARIABLES
            //variables are containers for storing data values
            /*
            int numOne; declaring a variable of type int
            int numTwo;

            numOne = 30; assigning a variable
            numTwo = 40;

            int total = numOne + numTwo; inline initialization (declaring and assigning in one line)
             */
        //METHODS
            //a block of code which only runs when it is called
            //you can pass data, known as parameters/arguments, into a method
            //methods are used to perform actions, they are also known as functions
            //they are used to reuse code
            /* public int addNumbers(int numOne, int numTwo) { access modifier, return type, name, parameters
            int total = numOne + numTwo; local variable
            return total; return total
            } method body
            addNumbers(1,2); calling a method uses name and arguments
             */
        //IF STATEMENTS
            //IF STATEMENT
            /* if(numOne > numTwo) { contains if keyword and condition
            System.out.println(numOne + "is greater than" + numTwo); body
            }
             */
            //IF-ELSE STATEMENT
            /* if(numOne > numTwo) {
            System.out.println(numOne + "is greater than" + numTwo);
            } else { keyword
            System.out.println(numOne + "is less than" + numTwo); else statement body
            }
             */
            //SWITCH
            //allows us to execute a block of code among many alternatives
            //the expression is evaluated once and compared with the values of each case, if no match then default executed
                /*
                switch (expression) {

                case value1:
                //code
                break;

                case value2:
                //break;
                ...

                default:
                //default statements
                */
        //LOOPS
            //FOR LOOP
                //used to run a block of code for a certain number of times
                /* for(int index = 0; index < 3, index++) { initializer, condition, incrementor/decrementor
                body
                }
                 */
            //WHILE LOOP
                //executes a specific code until a condition is met
                /* int index = 0; initalizer
                while(index < 3)) { condition
                body
                i++; incrementor/decrementor
                }
                 */
            //DO-WHILE LOOP
                //executes a code before checking condition
                /*
                int i = 1, n = 5; variables
                do { keyword
                body
                i++; iterator
                } while(i <= n); condition
                 */
            //FOR-EACH LOOP
                //used to iterate through elements of arrays and collections (like ArrayLists), aka enhanced loop
                /*
                for(int number: numbers) {dataType item: array - print array elements
                System.out.println("number); body
                }
                int [] numbers = {3, 9, 5, -5};
                int sum = 0
                for (int number: numbers) {dataType item: array - Sum of array elements
                sum += number
                }
                System.out.println("Sum = " + sum);
                 */
        //OBJECTS
        //CLASSES
        //ARRAYS
            //collection of similar types of data, starts at index 0
                /* String[] suits = {"Spades", "Hearts", "Diamonds", "Clubs"} - String array is initialized and assigned values
                System.out.println(Arrays.toString(suits)) ; how to print an array
                suits[0];
                System.out.println(suits[0]); how to access one element from an array
                */
        //ARRAYLISTS
            // ArrayLists allows us to create resizable arrays. also comes with set methods, dynamic
            //need to import class first
            //size() | returns the length of the arraylist
            //sort() | sorts the arraylist elements
            //clone() | creates a new arraylist with the same element, size, and capacity
            //contains() | Searches the arraylist for the specified element and returns a boolean
            //ensureCapacity() | specifies the total elements the arraylist can contain
            //isEmpty() | checks if arraylist is empty
            //indexOf() | Searches a specified element in an arraylist and returns the index of the element

                /* ArrayList<Type> name = new Arrayist<>();
                List<String> suits = new ArrayList<String>(); ArrayList of String values
                List<Integer> suits = new ArrayList<Integer>(); ArrayList of Integer values
                suits.add("Spades"); add values with the .add() method
                suits.add("Hearts");
                suits.add("Diamonds");
                suits.add("Clubs");
                suits.remove("2); remove element from index 2
                suits.set(2, "Joker"); change the element of the array List
                System.out.println(suits); how to print an ArrayList
                System.out.println(suits.get(0)); how to access one element of ArrayList
                */
        //GRIDS OR MAPS (TIC TAC TOE) - NEED TO ADD
        //EXCEPTION HANDLING
            //TRY-CATCH
                //allows you to define a block of code to be tested for errors while it is being executed, paired
                //finally statement allows you to execute code, after try...catch, regardless of the result
                 /* int[] numerator = {4, 8, 16, 32, 64, 128, 256}
                  int[] denominator = {2, 0, 4, 4, 0, 8}

                for(int i=0; i < numerator.length; i++ {
                try {
                System.out.println(numerator[i] + "/" + denominator[i] + " is " + numerator[i] / denominator[i]);
                } catch (ArrayIndexOutOfBoundsException ex) { ArrayIndexOutOfBoundsException,
                    System.oyt.println("Index is out of bounds!");
                } catch (ArithmeticException ex) {
                    System.out.println("Can't divide by zero.");
                } catch(Throwable ex) {
                    System.out.println("Some other exception.");
                    }
                 }
                    //output:
                    4/2 is 2
                    Can't divide by zero.
                    16/4 is 4
                    32/4 is 8
                    Can't divide by zero
                    128/8 is 16
                    Index is out of bounds!
                */
            //THROW
                //allows you to create a custom error with a class
                    /* public class InvalidIDNumberException extends Exception {
                        public InvalidIDNumberException (String message) {
                        super(message);
                        System.out.println(message);

                     //using the custom error in the main method
                     Scanner userInput = new Scanner(System.in);
                        System.out.println("\nHow old are you?");

                        int response = userInput.nextInt();

                        while(response<0 || response >110){
                        try{
                        throw new InvalidAgeException("No you're not"); //return to user if less than 0 or greater than 110
                        } catch (InvalidIDNumberException ex) {
                        ex.printStackTrace(); //prints out where the error occurs in the console but allows to run
                        } finally {
                        response = userInput.nextInt(); //allows user to enter another value
                     */

    }
}
